installed.packages("swirl")
installed.packages("swirl")
library(swirl)
installed.packages("swirl")
install.packages("swirl")
library(swirl)
swirl()
packageVersion("swirl")
install_from_swirl("R Programming")
swirl()
5+7
x <- 5+7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
Z * 2 + 100
z * 2 + 100
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c(0,10)
c(1, 2, 3, 4) + c(0,10,100)
z * 2 + 1000
my_div
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files)
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path("folder1", "folder2")
?dir.create
dir.create(file.path("testdir2","testdir3"), recursive = TRUE)
setwd(old.dir)
getwd()
unlink("testdir", recursive = TRUE)
1:20
pi:10
15:1
?':'
seq(1,20)
seq(0,10, by = 0.5)
seq(5,10, length.out = 30)
seq(5,10, length = 30)
my_seq = seq(5,10, length.out = 30)
my_seq <- seq(5,10, length.out = 30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2), times = 10)
rep(c(0,1,2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char = c("My", "name", "is")
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
c(my_char, "Pedro")
my_name <- c(my_char, "Pedro")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x <- x * 3
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
is.na(my_data)
my_na = is.na(my_data)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, 4, 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
install.packages("drat", repos="https://cran.rstudio.com")
drat:::addRepo("dmlc")
install.packages("xgboost", repos="http://dmlc.ml/drat/", type = "source")
library(xgboost)
data("agaricus.train", package = 'xgboost')
data("agaricus.test", package = 'xgboost')
train <- agaricus.train
test <- agaricus.test
bst <- xgboost(data = train$data, label = train$label, max.depth = 2, eta = 1, nrounds = 2, nthread = 2, objective = "binary:logistic")
pred <- predict(bst, test$data)
library(dplyr)
install.packages(dplyr)
install.packages("dplyr")
library(dplyr)
swirl
library(swirl)
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
print(cran)
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(5:20))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
View(cran)
View(cran)
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "IN" | country == "US")
filter(cran, size > 100500, r_os == 'linux-gnu')
filter(cran, !is.na(r_version))
info()
filter(cran, !is.na(r_version))
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size - 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyer)
library(dplyr)
cran <- tbl_df(mydf)
rm(mydf)
rm("mydf")
cran
?group_by
by_package = group_by(cran, package)
by_package <- group_by(cran, package)
by_package
summarize(by_package, avg_bytes = mean(size))
summarize(by_package, mean(size))
source('/tmp/Rtmpf59ZzQ/summarize1.R')
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View()
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
source('/tmp/Rtmpf59ZzQ/chain1.R')
submit()
submit()
submit()
submit()
source('/tmp/Rtmpf59ZzQ/chain3.R')
submit()
source('/tmp/Rtmpf59ZzQ/chain4.R')
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(data = res, col = sex_class, into = c("sex", "class"))
source('/tmp/Rtmpf59ZzQ/script1.R')
source('/tmp/Rtmpf59ZzQ/script1.R')
submit()
students3
source('/tmp/Rtmpf59ZzQ/script2.R')
submit()
?spread
source('/tmp/Rtmpf59ZzQ/script3.R')
submit()
source('/tmp/Rtmpf59ZzQ/script3.R')
submit()
library(readr)
parse_number("class5")
source('/tmp/Rtmpf59ZzQ/script4.R')
source('/tmp/Rtmpf59ZzQ/script4.R')
source('/tmp/Rtmpf59ZzQ/script4.R')
submit()
?mutate
source('/tmp/Rtmpf59ZzQ/script4.R')
?parse_number
source('/tmp/Rtmpf59ZzQ/script4.R')
source('/tmp/Rtmpf59ZzQ/script4.R')
source('/tmp/Rtmpf59ZzQ/script4.R')
source('/tmp/Rtmpf59ZzQ/script4.R')
source('/tmp/Rtmpf59ZzQ/script4.R')
source('/tmp/Rtmpf59ZzQ/script4.R')
source('/tmp/Rtmpf59ZzQ/script4.R')
source('/tmp/Rtmpf59ZzQ/script4.R')
submit()
source('/tmp/Rtmpf59ZzQ/script4.R')
submit()
students4
submit()
source('/tmp/Rtmpf59ZzQ/script6.R')
source('/tmp/Rtmpf59ZzQ/script6.R')
source('/tmp/Rtmpf59ZzQ/script6.R')
submit()
source('/tmp/Rtmpf59ZzQ/script7.R')
submit()
passed
failed
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
bind_rows(passed, failed)
sat
source('/tmp/Rtmpf59ZzQ/script8.R')
submit()
source('/tmp/Rtmpf59ZzQ/script9.R')
submit()
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileUrl, destfile = "q01.csv", method = "curl")
q01 <- read.csv(file = "q01.csv")
View(q01)
agricultureLogical <- filter(q01, ACR = 3)
agricultureLogical <- filter(q01, ACR == 3)
agricultureLogical <- filter(q01, ACR == 3, AGS == 6)
which(agricultureLogical)
agricultureLogical <- q01[q01$ACR = 3 & q01$AGS = 6]
agricultureLogical <- q01[q01$ACR == 3 & q01$AGS == 6]
agricultureLogical <- q01[q01$ACR == 3 & q01$AGS == 6]
agricultureLogical <- q01[q01$ACR == 3 & q01$AGS == 6, ]
which(agricultureLogical)
agricultureLogical
?which
?which
q01 <- read.csv(file = "q01.csv")
agricultureLogical <- q01[q01$ACR == 3 & q01$AGS == 6, ]
which(agricultureLogical)
?which
typeof(agricultureLogical)
which(q01, agricultureLogical)
which(agricultureLogical)
which(q01$ACR == 3 & q01$AGS == 6)
agricultureLogical <- q01$ACR == 3 & q01$AGS == 6
which(agricultureLogical)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", destfile = "q02.jpg", method = "curl")
library(jpeg)
install.packages(jpeg)
install.packages("jpeg")
library(jpeg)
q02 <- readJPEG("q02.jpg")
?quantile
quantile(q02, probs = c(30, 80))
quantile(q02, probs = c(0.30, 0.80))
q02 <- readJPEG("q02.jpg", native = TRUE)
quantile(q02, probs = c(0.30, 0.80))
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", destfile = "q03.csv", method = "curl")
q03 <- read.csv("q03.csv")
View(q03)
q03 <- read.csv("q03.csv", skip = 4)
library(dplyr)
q03 <- arrange(q03, desc(X.1))
q03[-4,]
q03[5:,]
q03[5:326,]
q03[5:326,]
q03[5:326,]
q03 <- q03[5:326,]
q03[13,]
q03 <- read.csv("q03.csv", skip = 4)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", destfile = "q032.csv", method = "curl")
q032 <- read.csv("q032.csv")
head(q03)
head(q032)
?match
match(q03$X, q032$CountryCode)
mergedQ03 <- merge(q03, q032, by.x = "X", by.y = "CountryCode")
head(mergedQ03)
mergedQ03 <- merge(q03, q032, by.x = "X", by.y = "CountryCode", all = TRUE)
head(mergedQ03)
mergedQ03 <- merge(q03, q032, by.x = "X", by.y = "CountryCode")
head(mergedQ03)
merged_sorted <- arrange(mergedQ03, desc(X.1))
View(merged_sorted)
q032 <- read.csv("q032.csv", stringsAsFactors = FALSE)
q03 <- read.csv("q03.csv", stringsAsFactors = FALSE)
mergedQ03 <- merge(q03, q032, by.x = "X", by.y = "CountryCode")
merged_sorted <- arrange(mergedQ03, desc(X.1))
?arrange
merged_sorted <- arrange(mergedQ03, desc(Gross.domestic.product.2012))
mergedQ03 <- mutate(mergedQ03, Gross.domestic.product.2012 = as.integer(Gross.domestic.product.2012))
merged_sorted <- arrange(mergedQ03, desc(Gross.domestic.product.2012))
group_income <- group_by(merged_sorted, Income.Group)
group_income
summarize(group_income, mean(Gross.domestic.product.2012))
summarize(group_income, mean(Gross.domestic.product.2012, na.rm = TRUE))
quantile(merged_sorted$Gross.domestic.product.2012)
quantile(merged_sorted$Gross.domestic.product.2012, na.rm = TRUE)
breaks <- quantile(merged_sorted$Gross.domestic.product.2012, probs = seq(0,1,0.2), na.rm = TRUE)
breaks
merged_sorted <- mutate(merged_sorted, quantile = cut(merged_sorted$Gross.domestic.product.2012, breaks = breaks))
filter(merged_sorted, Income.Group == "Lower middle income")
setwd("/media/discoD/Coursera/Data Science/Kaggle/Bag of Words")
mr <- read.csv("labeledTrainData.tsv", sep = "\t")
mr <- read.csv("labeledTrainData.tsv", sep = "\t", quote = "\\")
View(mr)
mr <- read.csv("labeledTrainData.tsv", sep = "\t", quote = "\"")
mr <- read.csv("labeledTrainData.tsv", sep = "\t", quote = "\\")
library(data.table)
mr <- fread("labeledTrainData.tsv", sep = "\t")
length(mr[mr$sentiment == 0])
mr$sentiment == 0
mr[mr$sentiment == 0]
length(mr[mr$sentiment == 0])
dim(mr[mr$sentiment == 0])
dim(mr[mr$sentiment == 0,])
dim(mr[mr$sentiment == 1])
dim(mr[mr$sentiment == 2])
mr[mr$sentiment == 2]
